// Miscellaneous algorithms.
module MiscAlgos.ZP;

import Iterator;
import Std hiding {Iterator::*, Array::to_iter, String::split};

import MiscAlgos.Traits;

// Finaite field Z/pZ.
type ZP p = struct { value : U32, prime : p };

trait p : PrimeProvider {
    create : p;
    value : p -> U32;
}

type P1000000007 = unbox struct {};

impl P1000000007 : PrimeProvider {
    create = P1000000007 {};
    value = |p| 1000000007_U32;
}

namespace ZP {
    power : [p : PrimeProvider] U32 -> ZP p -> ZP p;
    power = |x, e| (
        let res = from_U32(1_U32);
        loop((0_U32, res, e), |(i, res, e_to_2_to_i)| (
            if 1_U32.shift_left(i) > x { break $ res };
            let xi = x.bit_and(1_U32.shift_left(i)) != 0_U32;
            let res = if xi { res * e_to_2_to_i } else { res };
            let e_to_2_to_i_plus_1 = e_to_2_to_i * e_to_2_to_i;
            continue $ (i + 1_U32, res, e_to_2_to_i_plus_1)
        ))
    );

    inv : [p : PrimeProvider] ZP p -> ZP p;
    inv = |x| (
        let p = x.@prime.value;
        if x.@value == 0_U32 { undefined("[ZP::inv] divide by zero!") };
        x.power(p - 2_U32)
    );
}

impl [p : PrimeProvider] ZP p : Eq {
    eq = |this, that| (
        let p = this.@prime.value;
        this.@value == that.@value
    );
}

impl [p : PrimeProvider] ZP p : Add {
    add = |this, that| (
        let p = this.@prime.value;
        ZP { value : (this.@value + that.@value) % p, prime : this.@prime }
    );
}

impl [p : PrimeProvider] ZP p : Neg {
    neg = |this| (
        let p = this.@prime.value;
        ZP { value : (p - this.@value) % p, prime : this.@prime }
    );
}

impl [p : PrimeProvider] ZP p : Sub {
    sub = |this, that| (
        let p = this.@prime.value;
        ZP { value : (this.@value + p - that.@value) % p, prime : this.@prime }
    );
}

impl [p : PrimeProvider] ZP p : Mul {
    mul = |this, that| (
        let p = this.@prime.value.to_U64;
        ZP { value : ((this.@value.to_U64 * that.@value.to_U64) % p).to_U32, prime : this.@prime }
    );
}

impl [p : PrimeProvider] ZP p : Div {
    div = |this, that| this * that.inv;
}

impl [p : PrimeProvider] ZP p : FromU32 {
    from_U32 = |x| (
        let p = PrimeProvider::create;
        ZP { value : x % p.value, prime : p }
    );
}