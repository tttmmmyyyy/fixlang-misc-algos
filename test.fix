module Test;

import MiscAlgos;

test_zp : IO ();
test_zp = (
    eval assert_eq(|_|"test_zp 1", ZP::from_U32(1e9_U32) + ZP::from_U32(2e9_U32), ZP::from_U32(999999986_U32));
    eval assert_eq(|_|"test_zp 2", ZP::from_U32(1e9_U32) * ZP::from_U32(2e9_U32), ZP::from_U32(98_U32));
    eval assert_eq(|_|"test_zp 3", ZP::from_U32(1e9_U32) / ZP::from_U32(1e9_U32), ZP::from_U32(1_U32));
    eval assert_eq(|_|"test_zp 4", ZP::from_U32(1e9_U32) - ZP::from_U32(1e9_U32), ZP::from_U32(0_U32));
    eval assert_eq(|_|"test_zp 5", ZP::from_U32(1e9_U32) + (-ZP::from_U32(1e9_U32)), ZP::from_U32(0_U32));
    pure()
);

test_binom_table : IO ();
test_binom_table = (
    let table = binom_table(5);
    eval assert_eq(|_|"test_binom_table 0", table.@(0), [1]);
    eval assert_eq(|_|"test_binom_table 1", table.@(1), [1, 1]);
    eval assert_eq(|_|"test_binom_table 2", table.@(2), [1, 2, 1]);
    eval assert_eq(|_|"test_binom_table 3", table.@(3), [1, 3, 3, 1]);
    eval assert_eq(|_|"test_binom_table 4", table.@(4), [1, 4, 6, 4, 1]);
    eval assert_eq(|_|"test_binom_table 5", table.get_size, 5);
    pure()
);

test : IO ();
test = (
    eval *test_zp;
    eval *test_binom_table;
    pure()
);