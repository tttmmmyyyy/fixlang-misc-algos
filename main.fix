// Miscellaneous algorithms.
module MiscAlgos;

// TODO: move this to `Std`?
loop_rep : I64 -> a -> (I64 -> a -> LoopResult a a) -> a;
loop_rep = |count, state, body| (
    loop((0, state), |(i, state)|
        if i >= count { break $ state };
        let res = body(i, state);
        if res.is_break { break $ res.as_break };
        continue $ (i + 1, res.as_continue)
    )
);

// `fold_rep(n, state, body)` calculates `state.body(0).body(1)....body(n-1)`.
// 
// When `n <= 0`, it returns `state` as is.
fold_rep : I64 -> a -> (I64 -> a -> a) -> a;
fold_rep = |n, state, body| (
    fold_rep_rev(n, state, |i, state| body(n - i - 1, state))
);

// `fold_rep_rev(n, state, body)` calculates `state.body(n-1).body(n-2)....body(0)`.
// 
// When `n <= 0`, it returns `state` as is.
fold_rep_rev : I64 -> a -> (I64 -> a -> a) -> a;
fold_rep_rev = |n, state, body| (
    if n <= 0 { state };
    let state = body(n - 1, state);
    fold_rep_rev(n - 1, state, body)
);

// Finaite field Z/pZ.
type ZP p = struct { value : U32, prime : p };

trait p : PrimeProvider {
    create : p;
    value : p -> U32;
}

type P1000000007 = unbox struct {};

impl P1000000007 : PrimeProvider {
    create = P1000000007 {};
    value = |p| 1000000007_U32;
}

namespace ZP {
    power : [p : PrimeProvider] U32 -> ZP p -> ZP p;
    power = |x, e| (
        let res = from_U32(1_U32);
        loop((0_U32, res, e), |(i, res, e_to_2_to_i)| (
            if 1_U32.shift_left(i) > x { break $ res };
            let xi = x.bit_and(1_U32.shift_left(i)) != 0_U32;
            let res = if xi { res * e_to_2_to_i } else { res };
            let e_to_2_to_i_plus_1 = e_to_2_to_i * e_to_2_to_i;
            continue $ (i + 1_U32, res, e_to_2_to_i_plus_1)
        ))
    );

    inv : [p : PrimeProvider] ZP p -> ZP p;
    inv = |x| (
        let p = x.@prime.value;
        eval assert(|_|"[ZP] divide by zero!", x.@value != 0_U32);
        x.power(p - 2_U32)
    );
}

impl [p : PrimeProvider] ZP p : Eq {
    eq = |this, that| (
        let p = this.@prime.value;
        this.@value == that.@value
    );
}

impl [p : PrimeProvider] ZP p : Add {
    add = |this, that| (
        let p = this.@prime.value;
        ZP { value : (this.@value + that.@value) % p, prime : this.@prime }
    );
}

impl [p : PrimeProvider] ZP p : Neg {
    neg = |this| (
        let p = this.@prime.value;
        ZP { value : (p - this.@value) % p, prime : this.@prime }
    );
}

impl [p : PrimeProvider] ZP p : Sub {
    sub = |this, that| (
        let p = this.@prime.value;
        ZP { value : (this.@value + p - that.@value) % p, prime : this.@prime }
    );
}

impl [p : PrimeProvider] ZP p : Mul {
    mul = |this, that| (
        let p = this.@prime.value.to_U64;
        ZP { value : ((this.@value.to_U64 * that.@value.to_U64) % p).to_U32, prime : this.@prime }
    );
}

impl [p : PrimeProvider] ZP p : Div {
    div = |this, that| this * that.inv;
}

trait a : FromU32 {
    from_U32 : U32 -> a;
}

impl [p : PrimeProvider] ZP p : FromU32 {
    from_U32 = |x| (
        let p = PrimeProvider::create;
        ZP { value : x % p.value, prime : p }
    );
}

impl I64 : FromU32 {
    from_U32 = |x| x.to_I64;
}

// The trait of rings.
trait Ring = Add + Neg + Sub + Mul + FromU32;

// Creates table for binomial coefficients.
// `binom_table(m).@(n).@(k)` is binom(n, k) for 0 <= k <= n < m.
binom_table : [r : Ring] I64 -> Array (Array r);
binom_table = |m| (
    fold_rep(m, [], |n, table|
        let table = table.push_back(Array::fill(n + 1, from_U32(0_U32)));
        fold_rep(n + 1, table, |r, table|
            if r == 0 || r == n { table.mod(n, set(r, from_U32(1_U32))) };
            let x = table.@(n - 1).@(r - 1) + table.@(n - 1).@(r);
            table.mod(n, set(r, x))
        )
    )
);

// `factorial_table(n)` returns an array of `n!` for 0 <= i < n.
factorial_table : [r : Ring] I64 -> Array r;
factorial_table = |n| (
    let table = Array::fill(n, from_U32(0_U32));
    let table = table.set(0, from_U32(1_U32));
    fold_rep(n - 1, table, |i, table| let i = i + 1; table.set(i, table.@(i-1) * from_U32(i.to_U32)))
);

// `binomial_by_facts(n, k, fact)` calculates `n! / (k! * (n-k)!)` using a factorial table `fact`.
binomial_by_facts : [r : Ring, r : Div] I64 -> I64 -> Array r -> r;
binomial_by_facts = |n, k, facts| (
    if !(0 <= k && k <= n) { from_U32(0_U32) };
    facts.@(n) / facts.@(k) / facts.@(n - k)
);

// `monomials_by_facts(n, k, fact)` calculates the number of monomials of degree `n` with `k` variables using a factorial table `fact`.
monomials_by_facts : [r : Ring, r : Div] I64 -> I64 -> Array r -> r;
monomials_by_facts = |n, k, facts| binomial_by_facts(n + k - 1, n, facts);