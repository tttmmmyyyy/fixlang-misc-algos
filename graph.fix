module MiscAlgos.Graph;

import BinaryHeap::BinaryHeap::{push, pop, get_top, get_size};
import BinaryHeap::MinBinaryHeap;
import BinaryHeap::MinBinaryHeap::empty;

type Graph c = struct {
    // Edges in the graph.
    // Edges from node i to another are stored in edges.@(i).
    edges : Array (Array (Edge c)),
    // The number of nodes in the graph.
    size : I64,
};

namespace Graph {
    // Create a graph with the given number of nodes.
    make_discrete : I64 -> Graph c;
    make_discrete = |size| (
        if size < 0 { undefined("[Graph::create_discrete] the number of nodes should be >= 0.") };
        Graph { edges: Array::fill(size, []), size: size }
    );

    // Add an edge.
    // 
    // The first argument is the starting node, the second is the ending node,
    // and the third is the cost of the edge.
    add_edge : I64 -> I64 -> c -> Graph c -> Graph c;
    add_edge = |from, to, cost, graph| (
        if !(0 <= from && from < graph.@size) {
            undefined("[Graph::add_edge] the starting node is out of range.")
        };
        if !(0 <= to && to < graph.@size) {
            undefined("[Graph::add_edge] the ending node is out of range.")
        };
        let e = Edge { from: from, to: to, cost: cost };
        graph.mod_edges(mod(from, Array::push_back(e)))
    );

    // Add an bidirectional edge.
    add_bidirectional_edge : I64 -> I64 -> c -> Graph c -> Graph c;
    add_bidirectional_edge = |from, to, cost, graph|  graph.add_edge(from, to, cost).add_edge(to, from, cost);
}

type Edge c = struct {
    from : I64,
    to : I64,
    cost : c
};

// The pair of a node and a distance.
type NodeDistance c = struct {
    node : I64,
    dist : c
};

namespace NodeDistance {
    make : I64 -> c -> NodeDistance c;
    make = |node, dist| NodeDistance { node: node, dist: dist };
}

impl [c : LessThan] NodeDistance c : LessThan {
    less_than = |x, y| x.@dist < y.@dist;
}

namespace Graph {
    // Given a graph and a starting node, returns an array of costs to reach each node from the starting node.
    // 
    // The second argument is the value to represent infinity.
    dijkstra : [c : Additive, c : LessThan, c : LessThanOrEq] I64 -> c -> Graph c -> Array c;
    dijkstra = |start, inf, graph| (
        // The number of nodes in the graph.
        let nn = graph.@size;

        // The array of distances to reach each node from the starting node.
        let dists = Array::fill(nn, inf);
        let dists = dists.set(start, zero);

        // The binary heap to store the nodes to visit.
        let visit_list = MinBinaryHeap::empty.push(NodeDistance::make(start, zero));

        // The main loop.
        loop((dists, visit_list), |(dists, visit_list)| (
            // If there is no node to visit, break the loop.
            if visit_list.get_size == 0 { break $ dists };

            // Get the node with the smallest distance.
            let NodeDistance { node : node, dist : dist } = visit_list.get_top.as_some;
            let visit_list = visit_list.pop;
            if dists.@(node) < dist {
                // The node is already visited.
                continue $ (dists, visit_list)
            };
            // `dists.@(node) == dist` holds.

            // See all the neighbors of the node.
            let edges = graph.@edges.@(node);
            let en = edges.get_size;
            continue $ loop((dists, visit_list, 0), |(dists, visit_list, i)|
                if i == en { break $ (dists, visit_list) };
                let Edge { to : to, cost : cost, from : _ } = edges.@(i);

                // If the path using the current edge is not better than the previous one, skip.
                let new_dist = dist + cost;
                if dists.@(to) <= new_dist { continue $ (dists, visit_list, i+1) };

                // Update the distance to the node.
                let dists = dists.set(to, new_dist);
                let visit_list = visit_list.push(NodeDistance::make(to, new_dist));

                continue $ (dists, visit_list, i+1)
            )
        ))
    );
}