[general]
## Project name. This is a required field.
name = "misc-algos"

## Project version (in semver). This is a required field.
version = "0.4.3"

## Project authors.
authors = ["tttmmmyyyy"]

## Project description.
# description = "This is a Fix project."

## Project license.
license = "MIT"

[build]
## Fix source files to be compiled.
## Merged with files specified in the command line argument.
files = ["main.fix"]

## Object files to be linked.
## Merged with object files specified in the command line argument.
# objects = ["lib.o"]

## Static link libraries.
## Merged with libraries specified in the command line argument.
# static_links = ["abc"] # libabc.a

## Dynamic link libraries.
## Merged with libraries specified in the command line argument.
# dynamic_links = ["xyz"] # libxyz.so

## Library search paths for "static_links" and "dynamic_links".
## Merged with paths specified in the command line argument.
# library_paths = ["."]

## Whether to generate debug information.
## Overwritten by the command line argument.
# debug = true

## Optimization level.
## One of "none", "minimum", "separated", "default".
## Overwritten by the command line argument.
# opt_level = "default"

## Output file name.
## Overwritten by the command line argument.
# output = "myprogram.out"

## Whether to use the thread-safe reference counting.
## Overwritten by the command line argument.
# threaded = false

## Preliminary commands to be executed before the Fix program is compiled.
## This is useful when you need to compile a object files / library before compiling the Fix program.
# preliminary_commands = [["make", "lib.o"]]

## Additional build options when running `fix test`.
## Available fields are almost the same as ones in "[build]".
[build.test]
files = ["test.fix"]
memcheck = true

## By "[[dependencies]]" array, you can specify a Fix project as a dependency.
## Each dependent project must have "fixproj.toml" file at the project root directory.
## If a dependent project also has dependencies, "fix" will consider them recursively.
## NOTE: The syntax for version requirement is the same as in Cargo. See: https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html

## The following is an example of a dependency to a project in the local file system.
# [[dependencies]]
# name = "another-project"
# version = "*"
# path = "/path/to/project"

## The following is an example of a dependency to a project in a remote git repository.
## In this case, "fix" searches the tags (each name should be a semver, or semver with "v" prefix) of the repository to find the version that satisfies the requirement.
## If the repository has no tags, "fix" will use the latest commit of the default branch.
# [[dependencies]]
# name = "your-project"
# version = "1.2.0"
# git = { url = "https://github.com/tttmmmyyyy/your-project.git" }
