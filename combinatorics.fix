module MiscAlgos.Combinatorics;

import MiscAlgos.Traits;

// Creates table for binomial coefficients.
// `binom_table(m).@(n).@(k)` is binom(n, k) for 0 <= k <= n < m.
binom_table : [r : Ring] I64 -> Array (Array r);
binom_table = |m| (
    range(0, m).fold([], |n, table|
        let table = table.push_back(Array::fill(n + 1, from_U32(0_U32)));
        range(0, n + 1).fold(table, |r, table|
            if r == 0 || r == n { table.mod(n, set(r, from_U32(1_U32))) };
            let x = table.@(n - 1).@(r - 1) + table.@(n - 1).@(r);
            table.mod(n, set(r, x))
        )
    )
);

// `factorial_table(n)` returns an array of `n!` for 0 <= i < n.
factorial_table : [r : Ring] I64 -> Array r;
factorial_table = |n| (
    let table = Array::fill(n, from_U32(0_U32));
    let table = table.set(0, from_U32(1_U32));
    range(0, n - 1).fold(table, |i, table| let i = i + 1; table.set(i, table.@(i-1) * from_U32(i.to_U32)))
);

// `binomial_by_facts(n, k, fact)` calculates `n! / (k! * (n-k)!)` using a factorial table `fact`.
binomial_by_facts : [r : Ring, r : Div] I64 -> I64 -> Array r -> r;
binomial_by_facts = |n, k, facts| (
    if !(0 <= k && k <= n) { from_U32(0_U32) };
    facts.@(n) / facts.@(k) / facts.@(n - k)
);

// `monomials_by_facts(n, k, fact)` calculates the number of monomials of degree `n` with `k` variables using a factorial table `fact`.
monomials_by_facts : [r : Ring, r : Div] I64 -> I64 -> Array r -> r;
monomials_by_facts = |n, k, facts| binomial_by_facts(n + k - 1, n, facts);